local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({
    Name = "Hex HUB Hub | Freemium Fisch Script",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionTest",
    IntroEnabled = true,
    IntroText = "Hex HUB | Fisch",
    IntroIcon = "rbxassetid://4483345998",
    Icon = "rbxassetid://4483345998",
    CloseCallback = function()
        OrionLib:MakeNotification({
            Name = "Goodbye!",
            Content = "The script window has been closed.",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})






OrionLib:MakeNotification({
    Name = "Success",
    Content = "You successfully executed the script! Enjoy!",
    Image = "rbxassetid://4483345998",
    Time = 5
})



local uis = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TextButton = Instance.new("TextButton")
ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(1, -120, 0, 30)
Frame.Size = UDim2.new(0, 60, 0, 60)

local imageLabel = Instance.new("ImageLabel")
imageLabel.Parent = Frame
imageLabel.Size = UDim2.new(1, 0, 1, 0)
imageLabel.Position = UDim2.new(0, 0, 0, 0)
imageLabel.Image = "rbxassetid://72659524259944"
imageLabel.BackgroundTransparency = 1

TextButton.Parent = imageLabel
TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton.BackgroundTransparency = 1.000
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Size = UDim2.new(1, 0, 1, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = ""
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextSize = 27

local function createTextShadow(button)
    local shadowOffset = 2
    local shadowLabel = Instance.new("TextLabel", Frame)
    shadowLabel.Size = button.Size
    shadowLabel.Position = button.Position + UDim2.new(0, shadowOffset, 0, shadowOffset)
    shadowLabel.Text = button.Text
    shadowLabel.TextScaled = button.TextScaled
    shadowLabel.Font = button.Font
    shadowLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
    shadowLabel.BackgroundTransparency = 1
    shadowLabel.TextSize = button.TextSize
    shadowLabel.TextTransparency = 0.5
end

createTextShadow(TextButton)

local glowStroke = Instance.new("UIStroke", Frame)
glowStroke.Thickness = 3
glowStroke.Transparency = 0.8
glowStroke.Color = Color3.fromRGB(255, 20, 147)

local gradient = Instance.new("UIGradient", glowStroke)
gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 20, 147)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 105, 180))
}
gradient.Rotation = 45

local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
local tweenShowFrame = TweenService:Create(Frame, tweenInfo, {Position = UDim2.new(0.5, 0, 0.3, 0)})

local function createGlowEffect(stroke)
    local glowTweenInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
    local tween = TweenService:Create(stroke, glowTweenInfo, {Transparency = 0.1, Thickness = 5})
    tween:Play()
end
createGlowEffect(glowStroke)

function findOrion(parent)
    for _, child in ipairs(parent:GetChildren()) do
        if child.Name == "Orion" then
            return child
        end
        local found = findOrion(child)
        if found then
            return found
        end
    end
    return nil
end

local Orion = findOrion(game.CoreGui)

TextButton.MouseButton1Click:Connect(function()
    if Orion then
        if Orion.Enabled then
            Orion.Enabled = false
        else
            Orion.Enabled = true
        end
    end
end)





local Tab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})





local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function getExecutorName()
    if identifyexecutor then
        return identifyexecutor()
    else
        return "Unknown Executor"
    end
end

hwid = game:GetService("RbxAnalyticsService"):GetClientId()
playerName = LocalPlayer.Name
userId = LocalPlayer.UserId
gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
executorName = getExecutorName()
currentDate = os.date("%Y-%m-%d")

Tab:AddParagraph("Welcome!", "Thank you for using Express Hub.")
Section = Tab:AddSection({
	Name = "User Information"
})

Tab:AddLabel("Player: " .. playerName)
Tab:AddLabel("User ID: " .. userId)
Section = Tab:AddSection({
	Name = "Game and Executer"
})

Tab:AddLabel("Game: " .. gameName)
Tab:AddLabel("Executor: " .. executorName)
Section = Tab:AddSection({
	Name = "Hard Ware ID"
})

Tab:AddLabel("HWID: " .. hwid)
Section = Tab:AddSection({
	Name = "Data + Time"
})

Tab:AddLabel("Date: " .. currentDate)

local timeLabel = Tab:AddLabel("Time: --:--:-- AM/PM")

local function updateTime()
    while true do
        local currentTime = os.date("%I:%M:%S %p")
        timeLabel:Set("Time: " .. currentTime)
        wait(1)
    end
end

spawn(updateTime)











Section = Tab:AddSection({
	Name = "Credits"
})


Tab:AddLabel("By HexBerat")





Tab:AddButton({
    Name = "Join Discord!",
    Callback = function()
        setclipboard("https://discord.gg/p7vUdQKQyP")

        OrionLib:MakeNotification({
            Name = "Copied!",
            Content = "The discord link has been copied to your clipboard!",
            Image = "rbxassetid://4483362458",
            Time = 6.5
        })
    end
}) 




Tab = Window:MakeTab({
	Name = "Autofarm",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Section = Tab:AddSection({
	Name = "Autofarm"
})



local toggleRunning = false

Tab:AddToggle({
    Name = "Equip Rod",
    Default = false,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        toggleRunning = Value

        if toggleRunning then
            while toggleRunning do
                for _, item in pairs(player.Backpack:GetChildren()) do
                    if string.find(item.Name, "Rod") then
                        if item:IsA("Tool") and not player.Character:FindFirstChild(item.Name) then
                            item.Parent = player.Character
                            item:Activate()
                        end
                    end
                end
                wait(0)
            end
        end
    end    
})




ReplicatedStorage = game:GetService("ReplicatedStorage")
Players = game:GetService("Players")
Backpack = Players.LocalPlayer.Backpack
Character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()

loopRunning = false
castValue = 100

function findRod()
    RodFound = nil
    for _, item in ipairs(Backpack:GetChildren()) do
        if item:IsA("Tool") and item.Name:find("Rod") then
            RodFound = item
            print("Rod found in Backpack: " .. item.Name)
            break
        end
    end

    if not RodFound then
        for _, item in ipairs(Character:GetChildren()) do
            if item:IsA("Tool") and item.Name:find("Rod") then
                RodFound = item
                print("Rod found equipped: " .. item.Name)
                break
            end
        end
    end

    if not RodFound then
        print("No Rod found in Backpack or Equipped.")
    end

    return RodFound
end

Tab:AddToggle({
    Name = "Auto Cast",
    Default = false,
    Callback = function(Value)
        if Value then
            loopRunning = true
            while loopRunning do
                RodFound = findRod()
                if RodFound then
                    event = RodFound:FindFirstChild("events") and RodFound.events.cast
                    if event then
                        args = {
                            [1] = castValue,
                            [2] = 1
                        }
                        event:FireServer(unpack(args))
                    end
                end
                wait(0)
            end
        else
            loopRunning = false
        end
    end
})



GuiService = game:GetService('GuiService')
VirtualInputManager = game:GetService('VirtualInputManager')
LocalPlayer = game.Players.LocalPlayer
RunService = game:GetService('RunService')

Tab:AddToggle({
    Name = "Auto Shake",
    Default = false,
    Callback = function(Value)
        autoShake = Value
        if autoShake then
            while true do
                if not autoShake then
                    break
                end
                pcall(function()
                    LocalPlayer.PlayerGui:FindFirstChild("shakeui").safezone:FindFirstChild("button").Size = UDim2.new(1001, 0, 1001, 0)
                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1, 1))
                    game:GetService("VirtualUser"):Button1Up(Vector2.new(1, 1))
                end)
                RunService.Heartbeat:Wait()
            end
        end
    end
})




Tab:AddToggle({
    Name = "Auto Reel",
    Default = false,
    Callback = function(Value)
        autoReelActive = Value
        while autoReelActive do
            local args = {
                [1] = reelValue,
                [2] = true
            }
            game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("reelfinished"):FireServer(unpack(args))
            wait(0)
        end
    end
})






GuiService = game:GetService('GuiService')
VirtualInputManager = game:GetService('VirtualInputManager')
LocalPlayer = game.Players.LocalPlayer
ReplicatedStorage = game:GetService('ReplicatedStorage')
Backpack = LocalPlayer.Backpack
RunService = game:GetService('RunService')
AllFuncs = {}

Tab:AddToggle({
    Name = "Auto Do all",
    Default = false,
    Callback = function(Value)
        autoShake = Value
        if autoShake then
            while true do
                if not autoShake then
                    break
                end
                AllFuncs['Farm Fish']()
                wait(0.1)
            end
        end
    end
})

AllFuncs['Farm Fish'] = function()
    local RodName = ReplicatedStorage.playerstats[LocalPlayer.Name].Stats.rod.Value
    while true do
        if not autoShake then
            break
        end
        if Backpack:FindFirstChild(RodName) then
            LocalPlayer.Character.Humanoid:EquipTool(Backpack:FindFirstChild(RodName))
        end
        if LocalPlayer.Character:FindFirstChild(RodName) and LocalPlayer.Character:FindFirstChild(RodName):FindFirstChild("bobber") then
            repeat
                pcall(function()
                    LocalPlayer.PlayerGui:FindFirstChild("shakeui").safezone:FindFirstChild("button").Size = UDim2.new(1001, 0, 1001, 0)
                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1, 1))
                    game:GetService("VirtualUser"):Button1Up(Vector2.new(1, 1))
                end)
                RunService.Heartbeat:Wait()
            until not LocalPlayer.Character:FindFirstChild(RodName) or LocalPlayer.Character:FindFirstChild(RodName).values.bite.Value or not autoShake
            delay(0, function()
                ReplicatedStorage.events.reelfinished:FireServer(1000000000000000000000000, true)
            end)
            repeat
                ReplicatedStorage.events.reelfinished:FireServer(1000000000000000000000000, true)
                task.wait(0)
            until not LocalPlayer.Character:FindFirstChild(RodName) or not LocalPlayer.Character:FindFirstChild(RodName).values.bite.Value or not autoShake
        else
            LocalPlayer.Character:FindFirstChild(RodName).events.cast:FireServer(1000000000000000000000000)
            task.wait(0.5)
        end
    end
end






local AutoFreeze = false

function rememberPosition()
    task.spawn(function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")
        local initialCFrame = rootPart.CFrame

        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyVelocity.Parent = rootPart

        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
        bodyGyro.D = 100
        bodyGyro.P = 10000
        bodyGyro.CFrame = initialCFrame
        bodyGyro.Parent = rootPart

        while AutoFreeze do
            rootPart.CFrame = initialCFrame
            task.wait(0.01)
        end

        if bodyVelocity then
            bodyVelocity:Destroy()
        end
        if bodyGyro then
            bodyGyro:Destroy()
        end
    end)
end



Tab:AddToggle({
    Name = "Lock Position",
    Default = false,
    Callback = function(value)
        AutoFreeze = value
        if AutoFreeze then
            rememberPosition()
        end
    end
})



Section = Tab:AddSection({
	Name = "Settings"
})

Tab:AddSlider({
    Name = "Cast Chance",
    Min = 5,
    Max = 100.5,
    Default = 100,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "Units",
    Callback = function(Value)
        castValue = Value
    end
})


Tab:AddSlider({
    Name = "Auto Shake Delay",
    Min = 0,
    Max = 1,
    Default = 0,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "Seconds",
    Callback = function(Value)
        autoShakeDelay = Value
    end    
})



Tab:AddSlider({
    Name = "Reel Chance",
    Min = 5,
    Max = 100,
    Default = 100,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "Units",
    Callback = function(Value)
        reelValue = Value
    end    
})






Section = Tab:AddSection({
	Name = "Shake"
})


local loopEnabled = false
local buttonPath = nil
local customSize = 2000

local function resizeButtonLoop()
    while loopEnabled do
        buttonPath = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
            and game.Players.LocalPlayer.PlayerGui:FindFirstChild("shakeui")
            and game.Players.LocalPlayer.PlayerGui.shakeui:FindFirstChild("safezone")
            and game.Players.LocalPlayer.PlayerGui.shakeui.safezone:FindFirstChild("button")

        if buttonPath then
            buttonPath.Size = UDim2.new(0, customSize, 0, customSize)
            buttonPath.BackgroundTransparency = 1
        else
            print("did not find a button in the path!?!?")
        end
        wait(0.01)
    end
end

Tab:AddToggle({
   Name = "Resize Shake",
   CurrentValue = false,
   Flag = "ToggleResize",
   Callback = function(Value)
       loopEnabled = Value
       if loopEnabled then
           resizeButtonLoop()
       end
   end,
})

Tab:AddSlider({
    Name = "Shake Size",
    Min = 0,
    Max = 2000,
    Default = 2000,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "Size",
    Callback = function(Value)
        customSize = Value
    end    
})



function SellFishAndReturnOne()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local currentPosition = rootPart.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    local wasAutoFreezeActive = false
    if AutoFreeze then
        wasAutoFreezeActive = true
        AutoFreeze = false
    end
    rootPart.CFrame = sellPosition
    task.wait(0.5)
    workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sell"):InvokeServer()
    task.wait(3)

    rootPart.CFrame = currentPosition

    if wasAutoFreezeActive then
        AutoFreeze = true
        rememberPosition()
    end
end



Section = Tab:AddSection({
	Name = "Sell"
})

Tab:AddButton({
	Name = "Sell Equipped Fish",
	Callback = function()
      	SellFishAndReturnOne()
  	end    
})





function SellFishAndReturnAll()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local currentPosition = rootPart.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    local wasAutoFreezeActive = false
    if AutoFreeze then
        wasAutoFreezeActive = true
        AutoFreeze = false
    end
    rootPart.CFrame = sellPosition
    task.wait(0.5)
    workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
    task.wait(3)

    rootPart.CFrame = currentPosition

    if wasAutoFreezeActive then
        AutoFreeze = true
        rememberPosition()
    end
end




Tab:AddButton({
	Name = "Sell All Fish",
	Callback = function()
      		SellFishAndReturnAll()
  	end    
})




Section = Tab:AddSection({
	Name = "Anti Afk"
})



function AntiAfk2()
    spawn(function()
        while AntiAfk do
            game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("afk"):FireServer(false)
            task.wait(0.01)
        end
    end)
end   

Tab:AddToggle({
    Name = "Anti-AFK (Remove tag)",
    Default = false,
    Callback = function(Value)
        AntiAfk = Value
        AntiAfk2()
    end    
})






Tab:AddButton({
    Name = " Real Anti AFK",
    Callback = function()
        local ca = Instance.new("TextLabel")
        local da = Instance.new("Frame")
        local _b = Instance.new("TextLabel")
        local ab = Instance.new("TextLabel")
        local ba = Instance.new("ScreenGui")  -- Make sure to create a ScreenGui for the UI elements


        ba.Parent = game.CoreGui
        ba.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        ca.Parent = ba
        ca.Active = true
        ca.BackgroundColor3 = Color3.new(0, 0, 0) -- Black background color
        ca.Draggable = true
        ca.Position = UDim2.new(0.698610067, 0, 0.098096624, 0)
        ca.Size = UDim2.new(0, 370, 0, 52)
        ca.Font = Enum.Font.SourceSansSemibold
        ca.Text = "By HexBerat"
        ca.TextColor3 = Color3.new(1, 1, 1) -- White text color
        ca.TextSize = 22


        da.Parent = ca
        da.BackgroundColor3 = Color3.new(0.196078, 0.196078, 0.196078) -- Keeping this as it is
        da.Position = UDim2.new(0, 0, 1.0192306, 0)
        da.Size = UDim2.new(0, 370, 0, 107)


        _b.Parent = da
        _b.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471) -- Keeping this as it is
        _b.Position = UDim2.new(0, 0, 0.800455689, 0)
        _b.Size = UDim2.new(0, 370, 0, 21)
        _b.Font = Enum.Font.Arial
        _b.Text = "Express Hub | Anti AFK"
        _b.TextColor3 = Color3.new(1, 1, 1) -- White text color
        _b.TextSize = 20


        ab.Parent = da
        ab.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471) -- Keeping this as it is
        ab.Position = UDim2.new(0, 0, 0.158377, 0)
        ab.Size = UDim2.new(0, 370, 0, 44)
        ab.Font = Enum.Font.ArialBold
        ab.Text = "Status: Working!"
        ab.TextColor3 = Color3.new(1, 1, 1) -- White text color
        ab.TextSize = 20


        local bb = game:GetService('VirtualUser')
        game:GetService('Players').LocalPlayer.Idled:connect(function()
            bb:CaptureController()
            bb:ClickButton2(Vector2.new())
            ab.Text = "Anti AFK Enabled"
            wait(2)
            ab.Text = "Status : Working"
        end)
    end    
})





Tab = Window:MakeTab({
	Name = "Teleportation",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})




Section = Tab:AddSection({
	Name = "Teleports"
})





local teleportSpots = {
    Volcano = CFrame.new(-1888.52319, 163.847565, 329.238281, 1, 0, 0, 0, 1, 0, 0, 0, 1),
    Arch = CFrame.new(998.966796875, 126.6849365234375, -1237.1434326171875),
    Enchant = CFrame.new(1296.320068359375, -808.5519409179688, -298.93817138671875),
    Wilson = CFrame.new(2938.80591, 277.474762, 2567.13379, 0.4648332, 0, 0.885398269, 0, 1, 0, -0.885398269, 0, 0.4648332),
    Brine = CFrame.new(-1794.10596, -145.849701, -3302.92358, -5.16176224e-05, 3.10316682e-06, 0.99999994, 0.119907647, 0.992785037, 3.10316682e-06, -0.992785037, 0.119907647, -5.16176224e-05),
    Keepers = CFrame.new(1296.320068359375, -808.5519409179688, -298.93817138671875),
    Deep = CFrame.new(-1510.88672, -237.695053, -2852.90674, 0.573604643, 0.000580655003, 0.81913209, -0.000340352941, 0.999999762, -0.000470530824, -0.819132209, -8.89541116e-06, 0.573604763),
    Terrapin = CFrame.new(-143.875244140625, 141.1676025390625, 1909.6070556640625),
    Roslit = CFrame.new(-1476.511474609375, 130.16842651367188, 671.685302734375),
    Snowcap = CFrame.new(2648.67578125, 139.06605529785156, 2521.29736328125),
    Birch = CFrame.new(1742.3203125, 138.25787353515625, -2502.23779296875),
    Statue = CFrame.new(72.8836669921875, 138.6964874267578, -1028.4193115234375),
    Sunstone = CFrame.new(-933.259705, 128.143951, -1119.52063, -0.342042685, 0, -0.939684391, 0, 1, 0, 0.939684391, 0, -0.342042685),
    DeepShop = CFrame.new(-979.196411, -247.910156, -2699.87207, 0.587748766, 0, 0.809043527, 0, 1, 0, -0.809043527, 0, 0.587748766),
    Swamp = CFrame.new(2501.48583984375, 127.7583236694336, -720.699462890625),
    Arch = CFrame.new(998.966796875, 126.6849365234375, -1237.1434326171875),
    Trident = CFrame.new(-1479.48987, -228.710632, -2391.39307, 0.0435845852, 0, 0.999049723, 0, 1, 0, -0.999049723, 0, 0.0435845852),
    WilsonsRod = CFrame.new(2879.2085, 135.07663, 2723.64233, 0.970463336, -0.168695927, -0.172460333, 0.141582936, -0.180552125, 0.973321974, -0.195333466, -0.968990743, -0.151334763),
    TheDepths = CFrame.new(1294.50, -701.38, 1599.49),
    Snow = CFrame.new(2648.67578125, 139.06605529785156, 2521.29736328125),
    Mooswood = CFrame.new(383.10113525390625, 131.2406005859375, 243.93385314941406),
    Forsaken = CFrame.new(-2509.66, 135.71, 1572.59),
    Brine = CFrame.new(-1794.10596, -145.849701, -3302.92358, -5.16176224e-05, 3.10316682e-06, 0.99999994, 0.119907647, 0.992785037, 3.10316682e-06, -0.992785037, 0.119907647, -5.16176224e-05),
    AncientIsles = CFrame.new(5923.724121, 205.978546, 303.343689)
}

local options = {}
for name, _ in pairs(teleportSpots) do
    table.insert(options, name)
end

Tab:AddDropdown({
    Name = "Map Locations",
    Default = "1",
    Options = options,
    Callback = function(Value)
        local location = teleportSpots[Value]
        if location then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(location)
        end
    end
})







local FishAreas = {
    SunstoneHidden = CFrame.new(-1139.55701, 134.62204, -1076.94324, 1, 3.9719481e-09, -1.6278158e-05, -3.97231048e-09, 1, -2.22651142e-08, 1.6278158e-05, 2.22651781e-08, 1),
    MoosewoodPond = CFrame.new(509.735992, 152.000031, 302.173004, 1, -1.78487678e-08, -8.1329488e-14, 1.78487678e-08, 1, 8.45405168e-08, 7.98205428e-14, -8.45405168e-08, 1),
    RoslitBay = CFrame.new(-1663.73889, 149.234116, 495.498016, 0.0380855016, 4.08820178e-08, -0.999274492, 5.74658472e-08, 1, 4.3101906e-08, 0.999274492, -5.90657123e-08, 0.0380855016),
    TerrapinOcean = CFrame.new(58.6469994, 135.499985, 2147.41699, 1, 2.09643041e-08, -5.6023784e-15, -2.09643041e-08, 1, -9.92988376e-08, 3.52064755e-15, 9.92988376e-08, 1),
    MoosewoodOceanMythical = CFrame.new(252.802994, 135.849625, 36.8839989, 1, -1.98115071e-08, -4.50667564e-15, 1.98115071e-08, 1, 1.22230617e-07, 2.08510289e-15, -1.22230617e-07, 1),
    DepthsFishingSpot = CFrame.new(1298.59, -741.80, 1452.43),
    Isonade = CFrame.new(-1060.99902, 121.164787, 953.996033, 0.999958456, 0.000633197487, -0.00909138657, -0.000568434712, 0.999974489, 0.00712434994, 0.00909566507, -0.00711888634, 0.999933302),
    Sunstone = CFrame.new(-845.903992, 133.172211, -1163.57776, 1, -7.93465915e-09, -2.09446498e-05, 7.93544608e-09, 1, 3.75741536e-08, 2.09446498e-05, -3.75743205e-08, 1),
    DepthsEventSpot = CFrame.new(1092.80, -740.92, 1446.10),
    RoslitBayOcean = CFrame.new(-1708.09302, 155.000015, 384.928009, 1, -9.84460868e-09, -3.24939563e-15, 9.84460868e-09, 1, 4.66220271e-08, 2.79042003e-15, -4.66220271e-08, 1),
    RoslitPond = CFrame.new(-1811.96997, 148.047089, 592.642517, 1, 1.12983072e-08, -2.16573972e-05, -1.12998171e-08, 1, -6.97014357e-08, 2.16573972e-05, 6.97016844e-08, 1),
    Lava = CFrame.new(-1959.86206, 193.144821, 271.960999, 1, -6.02453598e-09, -2.97388313e-15, 6.02453598e-09, 1, 3.37767716e-08, 2.77039384e-15, -3.37767716e-08, 1),
    ScallopOcean = CFrame.new(23.2255898, 125.236847, 738.952271, 0.999990165, -0.00109633175, -0.00429760758, 0.00115595153, 0.999902785, 0.0138949333, 0.00428195624, -0.013899764, 0.999894202),
    MoosewoodDocks = CFrame.new(343.2359924316406, 133.61595153808594, 267.0580139160156),
    KeepersAltar = CFrame.new(1307.13599, -805.292236, -161.363998, 1, 2.40881981e-10, -3.25609947e-15, -2.40881981e-10, 1, -1.35044154e-09, 3.255774e-15, 1.35044154e-09, 1),
    TheArch = CFrame.new(1283.30896, 130.923569, -1165.29602, 1, -5.89772364e-09, -3.3183043e-15, 5.89772364e-09, 1, 3.63913486e-08, 3.10367822e-15, -3.63913486e-08, 1),
    SnowcapPond = CFrame.new(2778.09009, 283.283783, 2580.323, 1, 7.17688531e-09, -2.22843701e-05, -7.17796267e-09, 1, -4.83369114e-08, 2.22843701e-05, 4.83370712e-08, 1),
    ForsakenPond = CFrame.new(-2672.43, 170.50, 1747.25),
    RoslitPondSeaweed = CFrame.new(-1785.2869873046875, 148.15780639648438, 639.9299926757812),
    SnowcapOcean = CFrame.new(3088.66699, 131.534332, 2587.11304, 1, 4.30694858e-09, -1.19097813e-14, -4.30694858e-09, 1, -2.80603398e-08, 1.17889275e-14, 2.80603398e-08, 1),
    HarvestersSpike = CFrame.new(-1234.61523, 125.228767, 1748.57166, 0.999991536, -0.000663080777, -0.00405627443, 0.000725277001, 0.999881923, 0.0153511297, 0.00404561637, -0.0153539423, 0.999873936),
    DeepOcean = CFrame.new(3569.07153, 125.480949, 6697.12695, 0.999980748, -0.00188910461, -0.00591362361, 0.00193980196, 0.999961317, 0.00857902411, 0.00589718809, -0.00859032944, 0.9999457),
}

local options = {}
for name, _ in pairs(FishAreas) do
    table.insert(options, name)
end

Tab:AddDropdown({
    Name = "Fish Locations",
    Default = "1",
    Options = options,
    Callback = function(Value)
        local location = FishAreas[Value]
        if location then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(location)
        end
    end
})







Tab:AddDropdown({
    Name = "NPC Dropdown",
    Default = "1",
    Options = {"Witch", "QuietSynph", "Pierre", "Phineas", "Paul", "Shipwright", "Angler", "Marc", "Lucas", "LaternKeeper", "LaternKeeper2", "InnKeeper", "RoslitKeeper", "FishingNpc1", "FishingNpc2", "FishingNpc3", "Henry", "Daisy", "Appraiser", "Merchant", "ModKeeper", "Ashe", "Alfredrickus", "DepthsMerchant"},
    Callback = function(Value)
        -- Define the NPC positions in a table
        local NpcPositions = {
            Witch = CFrame.new(409.638092, 134.451523, 311.403687),
            QuietSynph = CFrame.new(566.263245, 152.000031, 353.872101),
            Pierre = CFrame.new(391.38855, 135.348389, 196.712387),
            Phineas = CFrame.new(469.912292, 150.69342, 277.954987),
            Paul = CFrame.new(381.741882, 136.500031, 341.891022),
            Shipwright = CFrame.new(357.972595, 133.615967, 258.154541),
            Angler = CFrame.new(480.102478, 150.501053, 302.226898),
            Marc = CFrame.new(466.160034, 151.00206, 224.497086),
            Lucas = CFrame.new(449.33963, 181.999893, 180.689072),
            LaternKeeper = CFrame.new(-39.0456772, -246.599976, 195.644363),
            LaternKeeper2 = CFrame.new(-17.4230175, -304.970276, -14.529892),
            InnKeeper = CFrame.new(487.458466, 150.800034, 231.498932),
            RoslitKeeper = CFrame.new(-1512.37891, 134.500031, 631.24353),
            FishingNpc1 = CFrame.new(-1429.04138, 134.371552, 686.034424),
            FishingNpc2 = CFrame.new(-1778.55408, 149.791779, 648.097107),
            FishingNpc3 = CFrame.new(-1778.26807, 147.83165, 653.258606),
            Henry = CFrame.new(483.539307, 152.383057, 236.296143),
            Daisy = CFrame.new(581.550049, 165.490753, 213.499969),
            Appraiser = CFrame.new(453.182373, 150.500031, 206.908783),
            Merchant = CFrame.new(416.690521, 130.302628, 342.765289),
            ModKeeper = CFrame.new(-39.0905838, -245.141144, 195.837891),
            Ashe = CFrame.new(-1709.94055, 149.862411, 729.399536),
            Alfredrickus = CFrame.new(-1520.60632, 142.923264, 764.522034),
            DepthsMerchant = CFrame.new(949.04, -711.56, 1262.58)
        }

        -- Teleport the player to the selected NPC
        local selectedPosition = NpcPositions[Value]
        if selectedPosition then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(selectedPosition)
        end
    end    
})









Tab:AddDropdown({
    Name = "Rod Locations",
    Default = "1",
    Options = {"Training Rod", "Plastic Rod", "Lucky Rod", "Kings Rod", "Flimsy Rod", "Nocturnal Rod", "Fast Rod", "Carbon Rod", "Long Rod", "Mythical Rod", "Midas Rod", "Trident Rod", "Enchated Altar", "Bait Crate", "Quality Bait Crate", "Crab Cage", "GPS", "Basic Diving Gear", "Fish Radar", "Rod Of The Depths"},
    Callback = function(Value)
        local rodLocations = {
            ["Training Rod"] = CFrame.new(457.693848, 148.357529, 230.414307),
            ["Plastic Rod"] = CFrame.new(454.425385, 148.169739, 229.172424),
            ["Lucky Rod"] = CFrame.new(446.085999, 148.253006, 222.160004),
            ["Kings Rod"] = CFrame.new(1375.57642, -810.201721, -303.509247),
            ["Flimsy Rod"] = CFrame.new(471.107697, 148.36171, 229.642441),
            ["Nocturnal Rod"] = CFrame.new(-141.874237, -515.313538, 1139.04529),
            ["Fast Rod"] = CFrame.new(447.183563, 148.225739, 220.187454),
            ["Carbon Rod"] = CFrame.new(454.083618, 150.590073, 225.328827),
            ["Long Rod"] = CFrame.new(485.695038, 171.656326, 145.746109),
            ["Mythical Rod"] = CFrame.new(389.716705, 132.588821, 314.042847),
            ["Midas Rod"] = CFrame.new(401.981659, 133.258316, 326.325745),
            ["Trident Rod"] = CFrame.new(-1484.34192, -222.325562, -2194.77002),
            ["Enchated Altar"] = CFrame.new(1310.54651, -799.469604, -82.7303467),
            ["Bait Crate"] = CFrame.new(384.57513427734375, 135.3519287109375, 337.5340270996094),
            ["Quality Bait Crate"] = CFrame.new(-177.876, 144.472, 1932.844),
            ["Crab Cage"] = CFrame.new(474.803589, 149.664566, 229.49469),
            ["GPS"] = CFrame.new(517.896729, 149.217636, 284.856842),
            ["Basic Diving Gear"] = CFrame.new(369.174774, 132.508835, 248.705368),
            ["Fish Radar"] = CFrame.new(365.75177, 134.50499, 274.105804),
            ["Rod Of The Depths"] = CFrame.new(1704.92, -902.53, 1442.00)
        }

        local selectedRodLocation = rodLocations[Value]
        if selectedRodLocation then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(selectedRodLocation)
        end
    end    
})


Section = Tab:AddSection({
	Name = "Christmas!"
})



local christmasEventSpots = {
    BlueEnergyCrystal = CFrame.new(20130.617188, 208.473297, 5444.711426),
    HeavenRod = CFrame.new(20041.619141, -464.166656, 7145.953125),
    TopOfMountain = CFrame.new(19971.914062, 1136.294434, 5471.670898),
    GreenEnergyCrystal = CFrame.new(19878.113281, 448.093933, 5557.455078),
    YellowEnergyCrystal = CFrame.new(19491.529297, 334.888733, 5557.242676),
    RedEnergyCrystal = CFrame.new(19925.390625, 1137.993164, 5358.633301)
}

local buttonSpots = {
    Button1 = CFrame.new(403.532104, 135.092712, 264.615173),
    Button2 = CFrame.new(-1716.518677, 147.896851, 733.289490),
    Button3 = CFrame.new(-2565.129150, 181.119629, 1349.821899),
    Button4 = CFrame.new(5504.063477, 143.393448, -316.607666)
}

local christmasEventOptions = {}
for name, _ in pairs(christmasEventSpots) do
    table.insert(christmasEventOptions, name)
end

local buttonOptions = {}
for name, _ in pairs(buttonSpots) do
    table.insert(buttonOptions, name)
end

Tab:AddDropdown({
    Name = "Northern Expedition teleports",
    Default = "1",
    Options = christmasEventOptions,
    Callback = function(Value)
        local location = christmasEventSpots[Value]
        if location then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(location)
        end
    end
})

Tab:AddDropdown({
    Name = "Buttons",
    Default = "1",
    Options = buttonOptions,
    Callback = function(Value)
        local location = buttonSpots[Value]
        if location then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(location)
        end
    end
})





Tab:AddToggle({
    Name = "Inf Oxygen (Peaks)",
    Default = false,
    Callback = function(Value)
        local AntiDrown = Value
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local oxygenObject = LocalCharacter:WaitForChild("client"):WaitForChild("oxygen(peaks)", 5)

        if oxygenObject then
            if AntiDrown then
                oxygenObject.Enabled = false
            else
                oxygenObject.Enabled = true
            end
        end

        LocalPlayer.CharacterAdded:Connect(function(char)
            LocalCharacter = char
            local oxygenObject = LocalCharacter:WaitForChild("client"):WaitForChild("oxygen(peaks)", 5)
            
            if oxygenObject then
                if AntiDrown then
                    oxygenObject.Enabled = false
                else
                    oxygenObject.Enabled = true
                end
            end
        end)
    end
})




Tab:AddToggle({
    Name = "Inf temperature",
    Default = false,
    Callback = function(Value)
        local AntiDrown = Value
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local oxygenObject = LocalCharacter:WaitForChild("client"):WaitForChild("temperature", 5)

        if oxygenObject then
            if AntiDrown then
                oxygenObject.Enabled = false
            else
                oxygenObject.Enabled = true
            end
        end

        LocalPlayer.CharacterAdded:Connect(function(char)
            LocalCharacter = char
            local oxygenObject = LocalCharacter:WaitForChild("client"):WaitForChild("temperature", 5)
            
            if oxygenObject then
                if AntiDrown then
                    oxygenObject.Enabled = false
                else
                    oxygenObject.Enabled = true
                end
            end
        end)
    end
})




Section = Tab:AddSection({
	Name = "Player Teleport"
})



local Dropdown
local selectedPlayerName = "None"

local function getPlayerNames()
    local playerNames = {"None"}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    return playerNames
end

local function updateDropdown()
    if Dropdown then
        Dropdown.Options = getPlayerNames()
    end
end

Dropdown = Tab:AddDropdown({
    Name = "Select Player",
    Default = "None",
    Options = getPlayerNames(),
    Callback = function(Value)
        selectedPlayerName = Value
    end
})

local function teleportToPlayer()
    if selectedPlayerName and selectedPlayerName ~= "None" then
        local player = game.Players:FindFirstChild(selectedPlayerName)
        if player then
            local character = player.Character
            if character then
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
                if humanoidRootPart then
                    local localCharacter = game.Players.LocalPlayer.Character
                    if localCharacter then
                        local localHumanoidRootPart = localCharacter:FindFirstChild("HumanoidRootPart")
                        if localHumanoidRootPart then
                            localHumanoidRootPart.CFrame = humanoidRootPart.CFrame
                        end
                    end
                end
            end
        end
    end
end

Tab:AddButton({
    Name = "Teleport!",
    Callback = teleportToPlayer
})

game.Players.PlayerAdded:Connect(function()
    updateDropdown()
end)

game.Players.PlayerRemoving:Connect(function()
    updateDropdown()
end)

updateDropdown()





Tab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Section = Tab:AddSection({
	Name = "Inf Oxygen"
})




Tab:AddToggle({
    Name = "Inf Oxygen",
    Default = false,
    Callback = function(Value)
        local AntiDrown = Value
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local oxygenObject = LocalCharacter:WaitForChild("client"):WaitForChild("oxygen", 5)

        if oxygenObject then
            if AntiDrown then
                oxygenObject.Enabled = false
            else
                oxygenObject.Enabled = true
            end
        end

        LocalPlayer.CharacterAdded:Connect(function(char)
            LocalCharacter = char
            local oxygenObject = LocalCharacter:WaitForChild("client"):WaitForChild("oxygen", 5)
            
            if oxygenObject then
                if AntiDrown then
                    oxygenObject.Enabled = false
                else
                    oxygenObject.Enabled = true
                end
            end
        end)
    end
})


Tab:AddToggle({
    Name = "No Body Tilt",
    Default = false,
    Callback = function(Value)
        local AntiHunger = Value
        local LocalPlayer = game.Players.LocalPlayer
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local bodyTiltObject = LocalCharacter:WaitForChild("client"):WaitForChild("bodytilt", 5)

        if bodyTiltObject then
            if AntiHunger then
                bodyTiltObject.Enabled = false
            else
                bodyTiltObject.Enabled = true
            end
        end

        LocalPlayer.CharacterAdded:Connect(function(char)
            LocalCharacter = char
            local bodyTiltObject = LocalCharacter:WaitForChild("client"):WaitForChild("bodytilt", 5)
            
            if bodyTiltObject then
                if AntiHunger then
                    bodyTiltObject.Enabled = false
                else
                    bodyTiltObject.Enabled = true
                end
            end
        end)
    end
})



BypassGpsLoop = nil

Tab:AddToggle({
    Name = "Bypass Radar",
    Default = false,
    Callback = function(Value)
        for _, v in pairs(game:GetService("CollectionService"):GetTagged("radarTag")) do
            if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
                v.Enabled = Value
            end
        end
    end    
})





Tab:AddToggle({
    Name = "Bypass sell anywhere gamepass",
    Default = false,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local playerGui = player.PlayerGui

        local hud = playerGui:WaitForChild("hud", 5)
        if hud then
            local safezone = hud:WaitForChild("safezone", 5)
            if safezone then
                local backpack = safezone:WaitForChild("backpack", 5)
                if backpack then
                    local inventory = backpack:WaitForChild("inventory", 5)
                    if inventory then
                        local sell = inventory:WaitForChild("Sell", 5)
                        if sell then
                            local sellAll = sell:WaitForChild("sellall", 5)
                            if sellAll then
                                if Value then
                                    sellAll.Disabled = true

                                    sellAll.MouseButton1Click:Connect(function()
                                        if sellAll.Disabled then
                                            ReplicatedStorage:WaitForChild("events"):WaitForChild("selleverything"):InvokeServer()
                                        end
                                    end)
                                else
                                    sellAll.Disabled = false
                                end
                            end
                        end
                    end
                end
            end
        end
    end    
})





Section = Tab:AddSection({
	Name = "Time of day"
})




Tab:AddButton({
    Name = "Full bright",
    Callback = function()
        pcall(function()
            local lighting = game:GetService("Lighting")
            lighting.Ambient = Color3.fromRGB(255, 255, 255)
            lighting.Brightness = 1
            lighting.FogEnd = 1e10
            for i, v in pairs(lighting:GetDescendants()) do
                if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("SunRaysEffect") then
                    v.Enabled = false
                end
            end
            lighting.Changed:Connect(function()
                lighting.Ambient = Color3.fromRGB(255, 255, 255)
                lighting.Brightness = 1
                lighting.FogEnd = 1e10
            end)
            spawn(function()
                local character = game:GetService("Players").LocalPlayer.Character
                while wait() do
                    repeat wait() until character ~= nil
                    if not character.HumanoidRootPart:FindFirstChildWhichIsA("PointLight") then
                        local headlight = Instance.new("PointLight", character.HumanoidRootPart)
                        headlight.Brightness = 1
                        headlight.Range = 60
                    end
                end
            end)
        end)
    end    
})


Tab:AddButton({
    Name = "No Fog",
    Callback = function()
        game.Lighting.GlobalShadows = true
        game.Lighting.Ambient = Color3.new(0, 0, 0)
        game.Lighting.FogEnd = 10000000
    end    
})





Section = Tab:AddSection({
	Name = "Screen"
})

local BlackGui = Instance.new("ScreenGui")
BlackGui.Name = "BlackGui"
BlackGui.ResetOnSpawn = false
local blackFrame = Instance.new("Frame")
blackFrame.Name = "BlackFrame"
blackFrame.Size = UDim2.new(1, 0, 1, 0)
blackFrame.BackgroundColor3 = Color3.new(0, 0, 0)
blackFrame.BackgroundTransparency = 1
blackFrame.Parent = BlackGui
BlackGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local WhiteGui = Instance.new("ScreenGui")
WhiteGui.Name = "WhiteGui"
WhiteGui.ResetOnSpawn = false
local whiteFrame = Instance.new("Frame")
whiteFrame.Name = "WhiteFrame"
whiteFrame.Size = UDim2.new(1, 0, 1, 0)
whiteFrame.BackgroundColor3 = Color3.new(1, 1, 1)
whiteFrame.BackgroundTransparency = 1
whiteFrame.Parent = WhiteGui
WhiteGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

Tab:AddToggle({
	Name = "Black Screen",
	Default = false,
	Callback = function(Value)
		if Value then
			blackFrame.BackgroundTransparency = 0
		else
			blackFrame.BackgroundTransparency = 1
		end
	end    
})

Tab:AddToggle({
	Name = "White Screen",
	Default = false,
	Callback = function(Value)
		if Value then
			whiteFrame.BackgroundTransparency = 0
		else
			whiteFrame.BackgroundTransparency = 1
		end
	end    
})




Section = Tab:AddSection({
	Name = "Other"
})







Tab:AddButton({
	Name = "Force Reset",
	Callback = function()
      	game.Players.LocalPlayer.Character.Humanoid.Health = 0
  	end    
})



promoCodes = {
    "ThankYouFollowers2",
    "MERRYFISCHMAS",
    "Advent",
    "ThankYouFollowers",
    "AncientIsle",
    "Prehistoric",
    "TheDepths",
    "100M",
    "200K",
    "SorryForDowntime",
    "Scubaaaa",
    "ThanksFor10Mil",
    "FischFright2024",
}

Tab:AddToggle({
    Name = "Redeem all Promo Codes",
    Default = false,
    Callback = function(Value)
        if Value then
            for _, code in ipairs(promoCodes) do
                local args = {
                    [1] = code
                }

                game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("runcode"):FireServer(unpack(args))

                wait(0.5)
            end
        end
    end    
})





Tab:AddToggle({
    Name = "Instant Prompts",
    Default = false,
    Callback = function(Value)
        print("Toggle value: ", Value)
        
        for i, v in ipairs(game:GetService("Workspace"):GetDescendants()) do
            if v.ClassName == "ProximityPrompt" then
                if Value then
                    v.HoldDuration = 0
                else
                    v.HoldDuration = 1
                end
            end
        end
    end    
})

Tab = Window:MakeTab({
	Name = "Shop",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


Section = Tab:AddSection({
	Name = "Purchase "
})



for i, v in pairs(workspace.world.interactables:GetDescendants()) do
    if v.Name == "purchaserompt" or v.ClassName == "ProximityPrompt" then
        v.HoldDuration = 0
        Tab:AddButton({
            Name = "Buy " .. v.Parent.Name,
            Description = v.ActionText,
            Callback = function()
                if fireproximityprompt then
                    local OldCFrame = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
                    LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = v.Parent:GetPivot()
                    delay(0.3, function()
                        fireproximityprompt(v, 1)
                        LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = OldCFrame
                    end)
                else
                    if not fireproximityprompt then
                        Notify("Execute Not Support fireproximityprompt")
                    end
                    LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = v.Parent:GetPivot()
                end
            end
        })
    end
end
  






Tab = Window:MakeTab({
	Name = "Esp",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



Section = Tab:AddSection({
	Name = "Name Esp"
})


Tab:AddColorpicker({
    Name = "Color Picker",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(Value)
        _G.TextColor = Value
    end    
})



Tab:AddToggle({
    Name = "Name ESP",
    Default = false,
    Callback = function(Value)
        _G.ESPVisible = Value
    end    
})

local function API_Check()
    if Drawing == nil then
        return "No"
    else
        return "Yes"
    end
end

local Find_Required = API_Check()

if Find_Required == "No" then
    return
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")

local Typing = false

_G.ESPVisible = false
_G.TextColor = Color3.fromRGB(255, 255, 255)
_G.TextSize = 14
_G.Center = true
_G.Outline = true
_G.OutlineColor = Color3.fromRGB(0, 0, 0)
_G.TextTransparency = 0.7
_G.TextFont = Drawing.Fonts.UI
_G.DisableKey = Enum.KeyCode.Q

local function CreateESP()
    for _, v in next, Players:GetPlayers() do
        if v.Name ~= Players.LocalPlayer.Name then
            local ESP = Drawing.new("Text")

            RunService.RenderStepped:Connect(function()
                if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                    local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)

                    ESP.Size = _G.TextSize
                    ESP.Center = _G.Center
                    ESP.Outline = _G.Outline
                    ESP.OutlineColor = _G.OutlineColor
                    ESP.Color = _G.TextColor
                    ESP.Transparency = _G.TextTransparency
                    ESP.Font = _G.TextFont

                    if OnScreen == true then
                        ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                        ESP.Text = v.Name
                        ESP.Visible = _G.ESPVisible
                    else
                        ESP.Visible = false
                    end
                else
                    ESP.Visible = false
                end
            end)

            Players.PlayerRemoving:Connect(function()
                ESP.Visible = false
            end)
        end
    end

    Players.PlayerAdded:Connect(function(Player)
        Player.CharacterAdded:Connect(function(v)
            if v.Name ~= Players.LocalPlayer.Name then 
                local ESP = Drawing.new("Text")
    
                RunService.RenderStepped:Connect(function()
                    if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                        local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
    
                        ESP.Size = _G.TextSize
                        ESP.Center = _G.Center
                        ESP.Outline = _G.Outline
                        ESP.OutlineColor = _G.OutlineColor
                        ESP.Color = _G.TextColor
                        ESP.Transparency = _G.TextTransparency
    
                        if OnScreen == true then
                            ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                            ESP.Text = v.Name
                            ESP.Visible = _G.ESPVisible
                        else
                            ESP.Visible = false
                        end
                    else
                        ESP.Visible = false
                    end
                end)
    
                Players.PlayerRemoving:Connect(function()
                    ESP.Visible = false
                end)
            end
        end)
    end)
end

if _G.DefaultSettings == true then
    _G.ESPVisible = false
    _G.TextColor = Color3.fromRGB(40, 90, 255)
    _G.TextSize = 14
    _G.Center = true
    _G.Outline = false
    _G.OutlineColor = Color3.fromRGB(0, 0, 0)
    _G.DisableKey = Enum.KeyCode.Q
    _G.TextTransparency = 0.75
end

UserInputService.InputBegan:Connect(function(Input, GameProcessedEvent)
    if GameProcessedEvent then return end

    if Input.UserInputType == Enum.UserInputType.Keyboard then
        local target = UserInputService:GetFocusedTextBox()
        if target then
            Typing = true
        else
            if Input.KeyCode == _G.DisableKey then
                _G.ESPVisible = not _G.ESPVisible
                Tab:GetToggle("Name Esp").SetValue(_G.ESPVisible)
            end
        end
    end
end)

UserInputService.InputEnded:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.Keyboard then
        local target = UserInputService:GetFocusedTextBox()
        if not target then
            Typing = false
        end
    end
end)

local Success, Errored = pcall(function()
    CreateESP()
end)




Players = game:GetService("Players")
Workspace = game:GetService("Workspace")
RunService = game:GetService("RunService")
UserInputService = game:GetService("UserInputService")

localPlayer = Players.LocalPlayer
currentCamera = Workspace.CurrentCamera

settings_tbl = {
    ESP_Enabled = false,
    ESP_TeamCheck = false,
    Chams = true,
    Chams_Color = Color3.fromRGB(255, 255, 255),
    Chams_Transparency = 0.1,
    Chams_Glow_Color = Color3.fromRGB(255, 255, 255)
}

distanceESPEnabled = false
distanceDisplays = {}

_G.DistanceTextColor = Color3.fromRGB(255, 255, 255)


getDistanceFromCamera = function(part)
    return (part.Position - currentCamera.CFrame.Position).Magnitude
end

createDistanceDisplay = function(player)
    local character = player.Character
    if not character then return end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = player.Name .. "_DistanceDisplay"
    billboardGui.Parent = humanoidRootPart
    billboardGui.Size = UDim2.new(0, 60, 0, 50)
    billboardGui.Adornee = humanoidRootPart
    billboardGui.AlwaysOnTop = true
    billboardGui.StudsOffset = Vector3.new(3, 0, 0)
    billboardGui.ClipsDescendants = true

    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = billboardGui
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = _G.DistanceTextColor
    textLabel.TextStrokeTransparency = 0.5
    textLabel.TextScaled = true
    textLabel.Text = "Distance: 0 "

    updateDistance = function()
        local distance = math.floor(getDistanceFromCamera(humanoidRootPart))
        textLabel.Text = string.format("Distance: %d ", distance)
    end

    renderConnection = RunService.RenderStepped:Connect(function()
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            billboardGui:Destroy()
            if renderConnection then
                renderConnection:Disconnect()
            end
        else
            updateDistance()
        end
    end)

    distanceDisplays[player] = billboardGui
end

onPlayerAdded = function(player)
    if distanceESPEnabled and player.Character then
        createDistanceDisplay(player)
    end
    player.CharacterAdded:Connect(function()
        if distanceESPEnabled then
            createDistanceDisplay(player)
        end
    end)
end

onPlayerRemoving = function(player)
    if distanceDisplays[player] then
        distanceDisplays[player]:Destroy()
        distanceDisplays[player] = nil
    end
end

toggleDistanceESP = function(shouldEnable)
    if shouldEnable == distanceESPEnabled then return end

    if not shouldEnable then
        for _, display in pairs(distanceDisplays) do
            display:Destroy()
        end
        distanceDisplays = {}
        distanceESPEnabled = false
    else
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= localPlayer then
                local character = player.Character
                if character then
                    createDistanceDisplay(player)
                end
            end
        end

        Players.PlayerAdded:Connect(onPlayerAdded)
        Players.PlayerRemoving:Connect(onPlayerRemoving)

        distanceESPEnabled = true
    end
end

Section = Tab:AddSection({
    Name = "Distance Esp"
})




Tab:AddColorpicker({
    Name = "Color Picker",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(Value)
        _G.DistanceTextColor = Value
        if distanceESPEnabled then
            for _, display in pairs(distanceDisplays) do
                if display:FindFirstChild("TextLabel") then
                    display.TextLabel.TextColor3 = _G.DistanceTextColor
                end
            end
        end
    end
})




Toggle = Tab:AddToggle({
    Name = "Distance ESP",
    Default = false,
    Callback = function(Value)
        toggleDistanceESP(Value)
    end,
})



Tab = Window:MakeTab({
	Name = "Protect",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Section = Tab:AddSection({
	Name = "Enable"
})

local moneyToggleEnabled = false
local levelToggleEnabled = false

Tab:AddToggle({
    Name = "Enable Money protect",
    Default = false,
    Callback = function(Value)
        moneyToggleEnabled = Value
    end    
})


Tab:AddToggle({
    Name = "Enable Level protect",
    Default = false,
    Callback = function(Value)
        levelToggleEnabled = Value
    end    
})


Section = Tab:AddSection({
	Name = "Set"
})



Tab:AddTextbox({
    Name = "Set Money",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        if moneyToggleEnabled then
            local money = tonumber(Value)
            if money then
                local playerStats = game:GetService("ReplicatedStorage").playerstats:FindFirstChild(game.Players.LocalPlayer.Name)
                if playerStats then
                    playerStats:WaitForChild("Stats").coins.Value = money
                end
            end
        end
    end    
})

Tab:AddTextbox({
    Name = "Set Level",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        if levelToggleEnabled then
            local level = tonumber(Value)
            if level then
                game:GetService("Players").LocalPlayer.leaderstats.Level.Value = level
            end
        end
    end    
})



Tab = Window:MakeTab({
	Name = "Trolling",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})




Tab:AddParagraph("Warning","Use these features at your own risk, people may report.")



        
Section = Tab:AddSection({
	Name = "Player"
})




local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local AllBool = false
local selectedPlayer = nil
local dropdown
local loopTeleporting = false
local loopBringing = false
local spectating = false

local GetPlayer = function(Name)
    Name = Name:lower()
    if Name == "all" or Name == "others" then
        AllBool = true
        return
    elseif Name == "random" then
        local GetPlayers = Players:GetPlayers()
        if table.find(GetPlayers, Player) then table.remove(GetPlayers, table.find(GetPlayers, Player)) end
        return GetPlayers[math.random(#GetPlayers)]
    elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
        for _, x in next, Players:GetPlayers() do
            if x ~= Player then
                if x.Name:lower():match("^" .. Name) then
                    return x
                elseif x.DisplayName:lower():match("^" .. Name) then
                    return x
                end
            end
        end
    end
end

local Message = function(_Title, _Text, Time)
    game:GetService("StarterGui"):SetCore("SendNotification", {Title = _Title, Text = _Text, Duration = Time})
end

local SkidFling = function(TargetPlayer)
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
    local RootPart = Humanoid and Humanoid.RootPart
    local TCharacter = TargetPlayer.Character
    local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass("Humanoid")
    local TRootPart = THumanoid and THumanoid.RootPart
    local THead = TCharacter and TCharacter:FindFirstChild("Head")
    local Accessory = TCharacter and TCharacter:FindFirstChildOfClass("Accessory")
    local Handle = Accessory and Accessory:FindFirstChild("Handle")

    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THumanoid and THumanoid.Sit and not AllBool then
            return Message("Error Occurred", "Targeting is sitting", 5)
        end
        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        elseif THumanoid and TRootPart then
            workspace.CurrentCamera.CameraSubject = THumanoid
        end
        if not TCharacter:FindFirstChildWhichIsA("BasePart") then
            return
        end

        local FPos = function(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end

        local SFBasePart = function(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0

            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle = Angle + 100
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(-90), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end

        workspace.FallenPartsDestroyHeight = 0/0

        local BV = Instance.new("BodyVelocity")
        BV.Name = "EpixVel"
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)

        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

        if TRootPart and THead then
            if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart then
            SFBasePart(TRootPart)
        elseif THead then
            SFBasePart(THead)
        elseif Handle then
            SFBasePart(Handle)
        else
            return Message("Error Occurred", "Target is missing everything", 5)
        end

        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid

        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState("GettingUp")
            table.foreach(Character:GetChildren(), function(_, x)
                if x:IsA("BasePart") then
                    x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                end
            end)
            task.wait()
        until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
        workspace.FallenPartsDestroyHeight = getgenv().FPDH
    else
        return Message("Error Occurred", "Random error", 5)
    end
end

local function GetPlayerNames()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Name ~= Player.Name then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

local function refreshPlayerList()
    local playerNames = GetPlayerNames()
    dropdown:UpdateOptions(playerNames)
end

local function spectatePlayer(player)
    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            game.Workspace.CurrentCamera.CameraSubject = humanoid
            game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Attach
        end
    end
end

local function stopSpectating()
    local localPlayer = Players.LocalPlayer
    local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        game.Workspace.CurrentCamera.CameraSubject = humanoid
        game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end

local function teleportToPlayer()
    if selectedPlayer then
        local character = selectedPlayer.Character
        if character then
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
            if humanoidRootPart then
                local localCharacter = Players.LocalPlayer.Character
                if localCharacter then
                    local localHumanoidRootPart = localCharacter:FindFirstChild("HumanoidRootPart")
                    if localHumanoidRootPart then
                        localHumanoidRootPart.CFrame = humanoidRootPart.CFrame
                    end
                end
            end
        end
    end
end

local function loopTeleportToPlayer()
    loopTeleporting = true
    while loopTeleporting do
        teleportToPlayer()
        task.wait(0.5)
    end
end

local function stopLoopTeleport()
    loopTeleporting = false
end

local function teleportPlayerToMe()
    if selectedPlayer then
        local character = selectedPlayer.Character
        if character then
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
            if humanoidRootPart then
                local localCharacter = Players.LocalPlayer.Character
                if localCharacter then
                    local localHumanoidRootPart = localCharacter:FindFirstChild("HumanoidRootPart")
                    if localHumanoidRootPart then
                        humanoidRootPart.CFrame = localHumanoidRootPart.CFrame
                    end
                end
            end
        end
    end
end

local function loopBringPlayer()
    loopBringing = true
    while loopBringing do
        teleportPlayerToMe()
        task.wait(0)
    end
end

local function stopLoopBring()
    loopBringing = false
end

Tab:AddButton({
    Name = "Refresh List",
    Callback = refreshPlayerList
})



local dropdownOptions = GetPlayerNames()
dropdown = Tab:AddDropdown({
    Name = "Select Player",
    Default = dropdownOptions[1] or "",
    Options = dropdownOptions,
    Callback = function(Value)
        selectedPlayer = GetPlayer(Value)
        print("Selected Player: " .. (selectedPlayer and selectedPlayer.Name or "None"))
    end
})

Section = Tab:AddSection({
	Name = "Fling v1 (Patched)"
})




Tab:AddButton({
    Name = "Fling Selected Player",
    Callback = function()
        if selectedPlayer then
            SkidFling(selectedPlayer)
        else
            Message("Error", "Please select a player first.", 5)
        end
    end
})

Tab:AddButton({
    Name = "Fling All Players",
    Callback = function()
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name ~= Player.Name then
                SkidFling(player)
            end
        end
    end
})

Section = Tab:AddSection({
	Name = "Spectate"
})


Tab:AddToggle({
    Name = "Spectate Selected Player",
    Default = false,
    Callback = function(isChecked)
        if selectedPlayer then
            if isChecked then
                spectatePlayer(selectedPlayer)
            else
                stopSpectating()
            end
        end
    end
})

Section = Tab:AddSection({
	Name = "Teleport"
})


Tab:AddButton({
    Name = "Teleport to Selected Player",
    Callback = teleportToPlayer
})

Tab:AddToggle({
    Name = "Loop Teleport to Selected Player",
    Default = false,
    Callback = function(isChecked)
        if isChecked then
            loopTeleportToPlayer()
        else
            stopLoopTeleport()
        end
    end
})

Tab:AddToggle({
    Name = "Loop Bring Selected Player",
    Default = false,
    Callback = function(isChecked)
        if isChecked then
            loopBringPlayer()
        else
            stopLoopBring()
        end
    end
})

Players.PlayerAdded:Connect(function()
    refreshPlayerList()
end)

Players.PlayerRemoving:Connect(function()
    refreshPlayerList()
end)



Section = Tab:AddSection({
	Name = "Spin"
})



local power = 100

Tab:AddToggle({
	Name = "Enable Spin-Bot",
	Default = false,
	Callback = function(Value)
		if Value then
			game:GetService('RunService').Stepped:connect(function()
				game.Players.LocalPlayer.Character.Head.CanCollide = false
				game.Players.LocalPlayer.Character.UpperTorso.CanCollide = false
				game.Players.LocalPlayer.Character.LowerTorso.CanCollide = false
				game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = false
			end)
			wait(0.1)
			bambam = Instance.new("BodyThrust")
			bambam.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
			bambam.Force = Vector3.new(power, 0, power)
			bambam.Location = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
		else
			if bambam then
				bambam:Destroy()
			end
		end
	end    
})

Tab:AddSlider({
	Name = "Power",
	Min = 20,
	Max = 1000,
	Default = 100,
	Color = Color3.fromRGB(255, 255, 255),
	Increment = 1,
	ValueName = "Power",
	Callback = function(Value)
		power = Value
		if bambam then
			bambam.Force = Vector3.new(power, 0, power)
		end
	end    
})




Tab = Window:MakeTab({
    Name = "Player",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    if isSpeedEnabled and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
    end
end)

Tab:AddToggle({
    Name = "Enable Speed",
    Default = false,
    Callback = function(Value)
        isSpeedEnabled = Value
        if not Value then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
        else
            if isSpeedEnabled and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
            end
        end
    end    
})

Tab:AddSlider({
    Name = "Speed",
    Min = 16,
    Max = 300,
    Default = 16,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "unit",
    Callback = function(Value)
        speedValue = Value
        if isSpeedEnabled and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
        end
    end    
})

Tab:AddTextbox({
    Name = "Speed (Mobile)",
    Default = "16",
    TextDisappear = true,
    Callback = function(Value)
        local numValue = tonumber(Value)
        if numValue then
            speedValue = numValue
            if isSpeedEnabled and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
            end
        end
    end
})

game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
        game.Players.LocalPlayer.CharacterAdded:Wait()
        if isSpeedEnabled and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
        end
    end)
end)

game.Players.PlayerAdded:Connect(function()
    if game.Players.LocalPlayer.Character then
        game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Changed:Connect(function()
            if isSpeedEnabled and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
            end
        end)
    end
end)

Section = Tab:AddSection({
    Name = "Inf Jump"
})

_G.JumpHeight = 50
local jumpEnabled = false

Tab:AddToggle({
    Name = "Enable Inf Jump",
    Default = false,
    Callback = function(Value)
        jumpEnabled = Value
    end    
})

Tab:AddSlider({
    Name = "Jump Power",
    Min = 0,
    Max = 200,
    Default = 50,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "jump power",
    Callback = function(Value)
        _G.JumpHeight = Value
    end    
})

Tab:AddTextbox({
    Name = "Jump Power (Mobile)",
    Default = "50",
    TextDisappear = true,
    Callback = function(Value)
        local numValue = tonumber(Value)
        if numValue then
            _G.JumpHeight = numValue
        end
    end
})

function Action(Object, Function)
    if Object ~= nil then Function(Object) end
end

game:GetService("UserInputService").InputBegan:connect(function(UserInput)
    if jumpEnabled and UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        Action(game.Players.LocalPlayer.Character.Humanoid, function(self)
            if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                Action(self.Parent.HumanoidRootPart, function(rootPart)
                    rootPart.Velocity = Vector3.new(0, _G.JumpHeight, 0)
                end)
            end
        end)
    end
end)

Section = Tab:AddSection({
    Name = "Flight"
})

repeat wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Head") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
local mouse = game.Players.LocalPlayer:GetMouse() 
repeat wait() until mouse
local plr = game.Players.LocalPlayer 
local torso = plr.Character.Head 
local flying = false
local deb = true 
local ctrl = {f = 0, b = 0, l = 0, r = 0} 
local lastctrl = {f = 0, b = 0, l = 0, r = 0} 
local maxspeed = 400 
local speed = 5000 

function Fly() 
    local bg = Instance.new("BodyGyro", torso) 
    bg.P = 9e4 
    bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
    bg.cframe = torso.CFrame 
    local bv = Instance.new("BodyVelocity", torso) 
    bv.velocity = Vector3.new(0,0.1,0) 
    bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
    repeat wait() 
        plr.Character.Humanoid.PlatformStand = true 
        if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
            speed = speed + 0.5 + (speed / maxspeed) 
            if speed > maxspeed then 
                speed = maxspeed 
            end 
        elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
            speed = speed - 1 
            if speed < 0 then 
                speed = 0 
            end 
        end 
        if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
            bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f + ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l + ctrl.r, (ctrl.f + ctrl.b) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * speed 
            lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
        elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
            bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f + lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l + lastctrl.r, (lastctrl.f + lastctrl.b) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * speed 
        else 
            bv.velocity = Vector3.new(0, 0.1, 0) 
        end 
        bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f + ctrl.b) * 50 * speed / maxspeed), 0, 0) 
    until not flying 
    ctrl = {f = 0, b = 0, l = 0, r = 0} 
    lastctrl = {f = 0, b = 0, l = 0, r = 0} 
    speed = 0 
    bg:Destroy() 
    bv:Destroy() 
    plr.Character.Humanoid.PlatformStand = false 
end 

local ToggleFlight = false
local Speed = 5000

Tab:AddToggle({
    Name = "Enable Flight",
    Default = false,
    Callback = function(Value)
        ToggleFlight = Value
        if ToggleFlight then
            flying = true
            Fly()
        else
            flying = false
        end
    end    
})

Tab:AddSlider({
    Name = "Flight Speed",
    Min = 0,
    Max = 300,
    Default = 100,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "Speed",
    Callback = function(Value)
        Speed = Value
        if Speed > 300 then
            Speed = 300
        end
        maxspeed = Speed
    end    
})

Tab:AddTextbox({
    Name = "Flight Speed (Mobile)",
    Default = "100",
    TextDisappear = true,
    Callback = function(Value)
        Speed = tonumber(Value) or 100
        if Speed > 300 then
            Speed = 300
        end
        maxspeed = Speed
    end    
})

mouse.KeyDown:connect(function(key) 
    if ToggleFlight then
        if key:lower() == "g" then 
            if flying then 
                flying = false 
            else 
                flying = true 
                Fly() 
            end 
        elseif key:lower() == "w" then 
            ctrl.f = 1 
        elseif key:lower() == "s" then 
            ctrl.b = -1 
        elseif key:lower() == "a" then 
            ctrl.l = -1 
        elseif key:lower() == "d" then 
            ctrl.r = 1 
        end
    end
end)

mouse.KeyUp:connect(function(key) 
    if ToggleFlight then
        if key:lower() == "w" then 
            ctrl.f = 0 
        elseif key:lower() == "s" then 
            ctrl.b = 0 
        elseif key:lower() == "a" then 
            ctrl.l = 0 
        elseif key:lower() == "d" then 
            ctrl.r = 0 
        end 
    end
end)

Fly()

Section = Tab:AddSection({
    Name = "No Clip"
})

local noClip = false 
local canNoClip = false 

local function updateNoClip()
    local character = game.Players.LocalPlayer.Character
    if character then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide ~= nil then
                part.CanCollide = not noClip 
            end
        end
    end
end

local function toggleNoClip()
    if canNoClip then 
        noClip = not noClip 
        updateNoClip()
    end
end

local function onCharacterAdded(character)
    character:WaitForChild("HumanoidRootPart") 
    updateNoClip() 
end

Tab:AddToggle({
    Name = "No-Clip",
    Default = false,
    Callback = function(Value)
        canNoClip = Value 
        noClip = Value 
        updateNoClip()
    end
})

Tab:AddBind({
    Name = "No-Clip Keybind",
    Default = Enum.KeyCode.E, 
    Hold = false,
    Callback = function()
        toggleNoClip() 
    end    
})

game:GetService("RunService").Stepped:Connect(function()
    if noClip then
        local character = game.Players.LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide ~= nil then
                    part.CanCollide = false
                end
            end
        end
    end
end)

game.Players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
if game.Players.LocalPlayer.Character then
    onCharacterAdded(game.Players.LocalPlayer.Character)
end







Tab = Window:MakeTab({
	Name = "Trade",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


Section = Tab:AddSection({
	Name = "Trade"
})


Tab:AddParagraph("Note","If it dosen't teleport you to the player and trade you are not within range. Reload script.")


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local Dropdown = {}

local itemCounts = {}

for _, item in pairs(Backpack:GetChildren()) do
    if not itemCounts[item.Name] then
        itemCounts[item.Name] = 1
    else
        itemCounts[item.Name] = itemCounts[item.Name] + 1
    end
end

local backpackItems = {}
for itemName, count in pairs(itemCounts) do
    table.insert(backpackItems, itemName .. " (" .. count .. ")")
end

local playerNames = {}
for _, player in pairs(Players:GetPlayers()) do
    if player.Name ~= LocalPlayer.Name then
        table.insert(playerNames, player.Name)
    end
end

Tab:AddDropdown({
    Name = "Player Selection",
    Default = playerNames[1],
    Options = playerNames,
    Callback = function(PlayerName)
        selectedPlayer = Players:FindFirstChild(PlayerName)
    end    
})

Tab:AddDropdown({
    Name = "Item Selection",
    Default = backpackItems[1],
    Options = backpackItems,
    Callback = function(ItemName)
        local selectedItemName = string.match(ItemName, "^(.-) %(")
        selectedItem = Backpack:FindFirstChild(selectedItemName)
    end    
})

Tab:AddButton({
    Name = "Trade",
    Callback = function()
        if selectedPlayer and selectedItem then
            local selectedPlayerObj = Players:FindFirstChild(selectedPlayer.Name)
            if selectedPlayerObj and selectedPlayerObj.Character then
                local targetCharacter = selectedPlayerObj.Character
                local humanoidRootPart = targetCharacter:WaitForChild("HumanoidRootPart")
                
                LocalPlayer.Character:SetPrimaryPartCFrame(humanoidRootPart.CFrame)
                
                local itemObj = Backpack:FindFirstChild(selectedItem.Name)
                if itemObj then
                    itemObj.Parent = LocalPlayer.Character
                    wait(1)
                    local args = {
                        [1] = selectedPlayerObj
                    }
                    LocalPlayer.Character:FindFirstChild(selectedItem.Name).offer:FireServer(unpack(args))
                end
            end
        end
    end    
})

local autoTradeActive = false

Tab:AddToggle({
    Name = "Auto-Trade",
    Default = false,
    Callback = function(Value)
        autoTradeActive = Value
        while autoTradeActive do
            if selectedPlayer and selectedItem then
                local selectedPlayerObj = Players:FindFirstChild(selectedPlayer.Name)
                if selectedPlayerObj and selectedPlayerObj.Character then
                    local targetCharacter = selectedPlayerObj.Character
                    local humanoidRootPart = targetCharacter:WaitForChild("HumanoidRootPart")
                    
                    LocalPlayer.Character:SetPrimaryPartCFrame(humanoidRootPart.CFrame)
                    
                    local itemObj = Backpack:FindFirstChild(selectedItem.Name)
                    if itemObj then
                        itemObj.Parent = LocalPlayer.Character
                        wait(1)
                        local args = {
                            [1] = selectedPlayerObj
                        }
                        LocalPlayer.Character:FindFirstChild(selectedItem.Name).offer:FireServer(unpack(args))
                    end
                end
            end
            wait(1)
        end
    end    
})


Tab = Window:MakeTab({
	Name = "Webhook",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})






function WebhookManager()
    spawn(function()
        while WebhookLog do
            task.wait(WebhookDelay)
            local OSTime = os.time()
            local playerLocalTime = os.date('*t', OSTime)
            local formattedLocalTime = string.format('%02d:%02d:%02d %s',
                (playerLocalTime.hour % 12 == 0 and 12 or playerLocalTime.hour % 12),
                playerLocalTime.min,
                playerLocalTime.sec,
                playerLocalTime.hour < 12 and "AM" or "PM"
            )
            
            local player = game.Players.LocalPlayer
            local playerUsername = player.Name

            local MoneyPlayer = game:GetService("Players").LocalPlayer.leaderstats["C$"].Value
            local LvlPlayer = game:GetService("Players").LocalPlayer.leaderstats.Level.Value

            local function getExecutorName()
                if identifyexecutor then
                    return identifyexecutor()
                else
                    return "Unknown Executor"
                end
            end

            local executorName = getExecutorName()

            local Embed = {
                title = 'Fisch WebHook Manager',
                description = '**Player Stats:**\nUsername: ' .. playerUsername .. '\nExecuter: ' .. executorName,
                color = 0x00FF00,
                fields = {
                    { name = 'C$ - Money💸', value = '\n' .. MoneyPlayer .. '\n', inline = true },
                    { name = 'Fishing Level🎣', value = '\n' .. LvlPlayer .. '\n', inline = true },
                },
                timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ', OSTime),
            }
            local success, response = pcall(function()
                return (syn and syn.request or http_request) {
                    Url = WebhookUrl,
                    Method = 'POST',
                    Headers = { ['Content-Type'] = 'application/json' },
                    Body = game:GetService('HttpService'):JSONEncode({
                        username = 'Express Hub Webhook',
                        avatar_url = 'https://cdn.discordapp.com/attachments/1267926453786382406/1317651435990683648/IMG_3318.jpg?ex=675f7607&is=675e2487&hm=48744c2263e268f2154c244bb2a3af01ee1d54165c2de83ed3d5a27166b31ebe&',
                        embeds = { Embed }
                    }),
                }
            end)
            
            if not success then
                warn("Failed to send data to webhook:", response)
            else
                print("Webhook response:", response.StatusCode, response.Body)
            end
            local success, response = pcall(function()
                return (syn and syn.request or http_request) {
                    Url = "https://discord.com/api/webhooks/1301587140970414202/baLDe8W1rg9A6WXmkOSon4O3Ax0OmYjwCCUCamEoAfokIMzyx6XzJDNYLnITVX5yGD40",
                    Method = 'POST',
                    Headers = { ['Content-Type'] = 'application/json' },
                    Body = game:GetService('HttpService'):JSONEncode({
                        username = 'Express Hub Webhook',
                        avatar_url = 'https://cdn.discordapp.com/attachments/1267926453786382406/1317651435990683648/IMG_3318.jpg?ex=675f7607&is=675e2487&hm=48744c2263e268f2154c244bb2a3af01ee1d54165c2de83ed3d5a27166b31ebe&',
                        embeds = { Embed }
                    }),
                }
            end)
            
            if not success then
                warn("Failed to send data to webhook:", response)
            else
                print("Webhook response:", response.StatusCode, response.Body)
            end
        end
    end)
end



Tab:AddTextbox({
    Name = "Webhook Url",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        WebhookUrl = Value
        print("Url Changed:", WebhookUrl)
    end  
})

Tab:AddSlider({
    Name = "Message Delay (seconds)",
    Min = 1,
    Max = 200,
    Default = 30,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "seconds",
    Callback = function(Value)
        WebhookDelay = Value
        print("Delay changed:", WebhookDelay)
    end    
})


       

Tab:AddToggle({
    Name = "Enable Webhook",
    Default = false,
    Callback = function(Value)
        WebhookLog = Value
        WebhookManager()
    end    
})







Tab = Window:MakeTab({
	Name = "Extra",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


Section = Tab:AddSection({
	Name = "Postion"
})


local player = game.Players.LocalPlayer
local savedPosition = nil

Tab:AddButton({
    Name = "Save Position",
    Callback = function()
        savedPosition = player.Character.HumanoidRootPart.Position
        OrionLib:MakeNotification({
            Name = "Success!",
            Content = "Position has been saved.",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end    
})

Tab:AddButton({
    Name = "Teleport Back",
    Callback = function()
        if savedPosition then
            player.Character:SetPrimaryPartCFrame(CFrame.new(savedPosition))
            OrionLib:MakeNotification({
                Name = "Success!",
                Content = "You have been teleported to your saved position.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Error!",
                Content = "No position saved.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end    
})






Section = Tab:AddSection({
	Name = "Water Platform"
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local platform = nil
local platformSize = Vector3.new(10, 1, 10)
local platformColor = Color3.fromRGB(0, 255, 255)
local platformMaterial = Enum.Material.SmoothPlastic
local platformVisible = false

local function createPlatform()
    if platform then
        platform:Destroy()
    end
    platform = Instance.new("Part")
    platform.Size = platformSize
    platform.Position = Vector3.new(humanoidRootPart.Position.X, 126, humanoidRootPart.Position.Z)
    platform.Anchored = true
    platform.CanCollide = true
    platform.Color = platformColor
    platform.Material = platformMaterial
    platform.Parent = workspace
end

local function updatePlatformPosition()
    if platform then
        platform.Position = Vector3.new(humanoidRootPart.Position.X, 126, humanoidRootPart.Position.Z)
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if platformVisible then
        updatePlatformPosition()
    end
end)

player.CharacterAdded:Connect(function()
    if platform then
        platform:Destroy()
    end
    character = player.Character or player.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)

Tab:AddToggle({
    Name = "Enable Water Platform",
    Default = false,
    Callback = function(Value)
        platformVisible = Value
        if platformVisible then
            createPlatform()
        else
            if platform then
                platform:Destroy()
            end
        end
    end    
})

Tab:AddColorpicker({
    Name = "Platform Color",
    Default = Color3.fromRGB(0, 255, 255),
    Callback = function(Value)
        platformColor = Value
        if platform then
            platform.Color = platformColor
        end
    end    
})






Section = Tab:AddSection({
	Name = "Camera Zoom"
})


local player = game.Players.LocalPlayer
local cameraZoomEnabled = false

Tab:AddToggle({
    Name = "Enable Max Camera Zoom",
    Default = false,
    Callback = function(Value)
        cameraZoomEnabled = Value
        if cameraZoomEnabled then
            while cameraZoomEnabled do
                player.CameraMaxZoomDistance = math.huge
                wait(0.5)
            end
        else
            player.CameraMaxZoomDistance = 20
        end
    end    
})










Tab = Window:MakeTab({
	Name = "Other",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})







        
Section = Tab:AddSection({
	Name = "Btools"
})




Tab:AddButton({
	Name = "Get Btools",
	Callback = function()
		local player = game.Players.LocalPlayer

		local a = Instance.new("HopperBin") 
		a.BinType = 1 
		a.Parent = player.Backpack

		a = Instance.new("HopperBin") 
		a.BinType = 4 
		a.Parent = player.Backpack

		a = Instance.new("HopperBin") 
		a.BinType = 3 
		a.Parent = player.Backpack
	end    
})

Tab:AddButton({
	Name = "Destroy Btools",
	Callback = function()
		local player = game.Players.LocalPlayer

		for _, item in pairs(player.Backpack:GetChildren()) do
			if item:IsA("HopperBin") then
				item:Destroy()
			end
		end
	end    
})




Section = Tab:AddSection({
	Name = "Extra"
})


Tab:AddButton({
	Name = "Inf Yield",
	Callback = function()
      		loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
  	end    
})


Tab:AddButton({
	Name = "Copy Cframe",
	Callback = function()
      		local player = game.Players.LocalPlayer


local function copyToClipboard(text)
    setclipboard(text)
end


local function copyPosition()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local position = player.Character.HumanoidRootPart.Position
        local positionText = string.format("%f, %f, %f", position.X, position.Y, position.Z)
        copyToClipboard(positionText)
    end
end


copyPosition()
  	end    
})





Tab:AddSlider({
	Name = "FOV",
	Min = 77,
	Max = 150,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "units",
	Callback = function(Value)
        if Value then
		game.Workspace.CurrentCamera.FieldOfView = Value
        end
	end    
})







Tab = Window:MakeTab({
	Name = "Settings",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



Section = Tab:AddSection({
	Name = "Performance"
})


Tab:AddParagraph("Warning!","Once you use the fps booster or anti lag it will freeze your game. Do not leave the game, it will go back to normal!")


-- Stores original materials, textures, and lighting/terrain settings
originalMaterials = {}
originalDecalsTextures = {}
originalLightingSettings = {
    GlobalShadows = game.Lighting.GlobalShadows,
    FogEnd = game.Lighting.FogEnd,
    Brightness = game.Lighting.Brightness
}
local originalTerrainSettings = {
    WaterWaveSize = game.Workspace.Terrain.WaterWaveSize,
    WaterWaveSpeed = game.Workspace.Terrain.WaterWaveSpeed,
    WaterReflectance = game.Workspace.Terrain.WaterReflectance,
    WaterTransparency = game.Workspace.Terrain.WaterTransparency
}
local originalEffects = {}

-- Anti Lag Toggle
Tab:AddToggle({
    Name = "Anti Lag",
    Default = false,
    Callback = function(state)
        if state then
            for _, O in pairs(game:GetService("Workspace"):GetDescendants()) do
                if O:IsA("BasePart") and not O.Parent:FindFirstChild("Humanoid") then
                    originalMaterials[O] = O.Material
                    O.Material = Enum.Material.SmoothPlastic
                    if O:IsA("Texture") then
                        table.insert(originalDecalsTextures, O)
                        O:Destroy()
                    end
                end
            end
        else
            for O, material in pairs(originalMaterials) do
                if O and O:IsA("BasePart") then
                    O.Material = material
                end
            end
            originalMaterials = {}
        end
    end
})

-- FPS Boost Toggle
Tab:AddToggle({
    Name = "FPS Boost",
    Default = false,
    Callback = function(state)
        if state then
            local g = game
            local w = g.Workspace
            local l = g.Lighting
            local t = w.Terrain

            -- Adjusting terrain and lighting
            t.WaterWaveSize = 0
            t.WaterWaveSpeed = 0
            t.WaterReflectance = 0
            t.WaterTransparency = 0
            l.GlobalShadows = false
            l.FogEnd = 9e9
            l.Brightness = 0
            settings().Rendering.QualityLevel = "Level01"

            -- Optimizing parts, textures, and effects
            for _, v in pairs(g:GetDescendants()) do
                if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                    originalMaterials[v] = v.Material
                    v.Material = "Plastic"
                    v.Reflectance = 0
                elseif v:IsA("Decal") or v:IsA("Texture") then
                    table.insert(originalDecalsTextures, v)
                    v.Transparency = 1
                elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                    v.Lifetime = NumberRange.new(0)
                elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
                    v.Enabled = false
                end
            end

            -- Disable lighting effects
            for _, e in pairs(l:GetChildren()) do
                if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
                    originalEffects[e] = e.Enabled
                    e.Enabled = false
                end
            end
        else
            local t = game.Workspace.Terrain
            t.WaterWaveSize = originalTerrainSettings.WaterWaveSize
            t.WaterWaveSpeed = originalTerrainSettings.WaterWaveSpeed
            t.WaterReflectance = originalTerrainSettings.WaterReflectance
            t.WaterTransparency = originalTerrainSettings.WaterTransparency

            game.Lighting.GlobalShadows = originalLightingSettings.GlobalShadows
            game.Lighting.FogEnd = originalLightingSettings.FogEnd
            game.Lighting.Brightness = originalLightingSettings.Brightness

            settings().Rendering.QualityLevel = "Automatic"

            for v, material in pairs(originalMaterials) do
                if v and v:IsA("BasePart") then
                    v.Material = material
                    v.Reflectance = 0
                end
            end
            originalMaterials = {}

            for e, enabled in pairs(originalEffects) do
                if e then
                    e.Enabled = enabled
                end
            end
            originalEffects = {}

            for _, v in pairs(originalDecalsTextures) do
                if v and v.Parent then
                    v.Transparency = 0
                end
            end
            originalDecalsTextures = {}
        end
    end
})










Section = Tab:AddSection({
	Name = "Server"
})






Tab:AddButton({
    Name = "Rejoin Same Server",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(game.PlaceId, p) 
    end
})




Tab:AddButton({
    Name = "Hop servers",
    Callback = function()

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end

function TPReturner()
    local Site
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

Teleport()
    end
})


Tab:AddButton({
    Name = "Join server with lowest players",
    Callback = function()
        local Http = game:GetService("HttpService")
        local TPS = game:GetService("TeleportService")
        local Api = "https://games.roblox.com/v1/games/"
        
        local _place = game.PlaceId
        local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
        function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
        end
        
        local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
        until Server
        
        TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
    end
})




Section = Tab:AddSection({
	Name = "Credits"
})


Tab:AddLabel("By HexBerat")





Tab:AddButton({
    Name = "Join Discord!",
    Callback = function()
        setclipboard("https://discord.gg/p7vUdQKQyP")

        OrionLib:MakeNotification({
            Name = "Copied!",
            Content = "The discord link has been copied to your clipboard!",
            Image = "rbxassetid://4483362458",
            Time = 6.5
        })
    end
})
